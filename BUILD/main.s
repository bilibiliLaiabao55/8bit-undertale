;
; File generated by cc65 v 2.19 - Git 4dfbccf
;
	.fopt		compiler,"cc65 v 2.19 - Git 4dfbccf"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_size
	.export		_bankLevel
	.export		_bankBuffer
	.export		_banked_call
	.export		_bank_push
	.export		_bank_pop
	.import		_set_prg_8000
	.import		_get_prg_8000
	.import		_famistudio_music_play
	.export		_irq_array
	.export		_double_buffer
	.export		_wram_array
	.export		_main

.segment	"RODATA"

.segment	"STARTUP"

.segment	"BSS"

_bankLevel:
	.res	1,$00
_bankBuffer:
	.res	10,$00
_irq_array:
	.res	32,$00
_double_buffer:
	.res	32,$00
.segment	"XRAM"
_wram_array:
	.res	8192,$00

; ---------------------------------------------------------------
; void __near__ banked_call (unsigned char bankId, void (*method)(void))
; ---------------------------------------------------------------

.segment	"STARTUP"

.proc	_banked_call: near

.segment	"STARTUP"

;
; void banked_call(unsigned char bankId, void (*method)(void)) {
;
	jsr     pushax
;
; bank_push(bankId);
;
	ldy     #$02
	lda     (sp),y
	jsr     _bank_push
;
; (*method)();
;
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     callax
;
; bank_pop();
;
	jsr     _bank_pop
;
; }
;
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ bank_push (unsigned char bankId)
; ---------------------------------------------------------------

.segment	"STARTUP"

.proc	_bank_push: near

.segment	"STARTUP"

;
; void bank_push(unsigned char bankId) {
;
	jsr     pusha
;
; bankBuffer[bankLevel] = get_prg_8000();
;
	lda     #<(_bankBuffer)
	ldx     #>(_bankBuffer)
	clc
	adc     _bankLevel
	bcc     L0002
	inx
L0002:	jsr     pushax
	jsr     _get_prg_8000
	ldy     #$00
	jsr     staspidx
;
; ++bankLevel;
;
	inc     _bankLevel
;
; set_prg_8000(bankId);
;
	ldy     #$00
	lda     (sp),y
	jsr     _set_prg_8000
;
; }
;
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ bank_pop (void)
; ---------------------------------------------------------------

.segment	"STARTUP"

.proc	_bank_pop: near

.segment	"STARTUP"

;
; if (bankLevel != 0) {
;
	lda     _bankLevel
	beq     L0002
;
; --bankLevel;
;
	dec     _bankLevel
;
; set_prg_8000(bankBuffer[bankLevel]);
;
	ldy     _bankLevel
	lda     _bankBuffer,y
	jmp     _set_prg_8000
;
; }
;
L0002:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"STARTUP"

.proc	_main: near

.segment	"STARTUP"

;
; famistudio_music_play(0);
;
	lda     #$00
	jsr     _famistudio_music_play
;
; ppu_off();
;
	jsr     _ppu_off
;
; oam_size(1);
;
	lda     #$01
	jsr     _oam_size
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; ppu_wait_nmi();
;
L0002:	jsr     _ppu_wait_nmi
;
; while(TRUE){
;
	jmp     L0002

.endproc

